@model NewISE.Models.DBModel.AltriDatiFamModel
@using NewISE.DBComuniItalia
@using System.Linq;
@using System.Collections;
@using System.Collections.Generic;

<link href="~/Content/css/CheckBoxRadio.css" rel="stylesheet" />

<script src="~/Scripts/globalize.0.1.3/globalize.js"></script>
<script src="~/Scripts/globalize.0.1.3/cultures/globalize.culture.it-IT.js"></script>

@{

    List<Comuni> comuni = (List<Comuni>)ViewData["Comuni"];
    decimal idMaggiorazioniFamiliari = Convert.ToDecimal(ViewData["idMaggiorazioniFamiliari"]);

}

@using (@Ajax.BeginForm("InserisciAltriDatiFamiliariConiuge", "AltriDatiFamiliari", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabConiuge", OnFailure = "ErroreElaborazioneAjax", InsertionMode = InsertionMode.Replace }, new { id = "formNewADF" }))
{
    @Html.AntiForgeryToken()
    <div style="padding-left: 15px; padding-right:5px;">
        <div class="form-horizontal">
            <h4> Inserisci Altri Dati Familiari</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.idConiuge)
            @Html.Hidden("idMaggiorazioniFamiliari", idMaggiorazioniFamiliari)

            @Html.HiddenFor(model => model.residente)
            @Html.HiddenFor(model => model.ulterioreMagConiuge)

            <div class="form-group">
                @Html.LabelFor(model => model.dataNascita, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.dataNascita, new { @class = "form-control", @style = "max-width:100px;", @placeholder = "gg/mm/aaaa" })
                    @Html.ValidationMessageFor(model => model.dataNascita, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.capNascita, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.capNascita, new { @class = "form-control text-uppercase", @style = "max-width:100px;", @list = "ListaCap" })
                    @Html.ValidationMessageFor(model => model.capNascita, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.comuneNascita, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.comuneNascita, new { @class = "form-control text-uppercase", @style = "max-width:250px;", @list = "ListaComuni" })
                    @Html.ValidationMessageFor(model => model.comuneNascita, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.provinciaNascita, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.provinciaNascita, new { @class = "form-control text-uppercase", @style = "max-width:250px;", @list = "ListaProvincie" })
                    @Html.ValidationMessageFor(model => model.provinciaNascita, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.nazionalita, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.nazionalita, new { @class = "form-control text-uppercase", @style = "max-width:250px;" })
                    @Html.ValidationMessageFor(model => model.nazionalita, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.indirizzoResidenza, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.indirizzoResidenza, new { @class = "form-control text-uppercase" })
                    @Html.ValidationMessageFor(model => model.indirizzoResidenza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.capResidenza, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.capResidenza, new { @class = "form-control text-uppercase", @style = "max-width:100px;", @list = "ListaCap" })
                    @Html.ValidationMessageFor(model => model.capResidenza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.comuneResidenza, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.comuneResidenza, new { @class = "form-control text-uppercase", @style = "max-width:250px;", @list = "ListaComuni" })
                    @Html.ValidationMessageFor(model => model.comuneResidenza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group ">
                @Html.LabelFor(model => model.provinciaResidenza, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.provinciaResidenza, new { @class = "form-control text-uppercase", @style = "max-width:250px;", @list = "ListaProvincie" })
                    @Html.ValidationMessageFor(model => model.provinciaResidenza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.residente, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.residente)
                    {
                        <div class="checkbox disabled">
                            <label style="font-size:1.5em">
                                <input type="checkbox" value="" disabled="disabled" checked="checked">
                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                            </label>
                        </div>

                    }
                    else
                    {
                        <div class="checkbox disabled">
                            <label style="font-size:1.5em">
                                <input type="checkbox" value="" disabled="disabled">
                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                            </label>
                        </div>

                    }

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ulterioreMagConiuge, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.ulterioreMagConiuge)
                    {
                        <div class="checkbox disabled">
                            <label style="font-size:1.5em">
                                <input type="checkbox" value="" disabled="disabled" checked="checked">
                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                            </label>
                        </div>

                    }
                    else
                    {
                        <div class="checkbox disabled">
                            <label style="font-size:1.5em">
                                <input type="checkbox" value="" disabled="disabled">
                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                            </label>
                        </div>

                    }
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Inserisci" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>

}

<p style="padding-left: 15px;">
    @Ajax.ActionLink("Torna indietro", "ElencoConiuge", "MaggiorazioniFamiliari", new { idMaggiorazioniFamiliari = idMaggiorazioniFamiliari }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabConiuge", OnFailure = "ErroreElaborazioneAjax", InsertionMode = InsertionMode.Replace })
</p>

<datalist id="ListaComuni">
    @foreach (var d in comuni.OrderBy(a => a.nome).ToList())
    {
        <option value="@d.nome" />
    }
</datalist>

<datalist id="ListaProvincie">
    @foreach (var d in comuni.GroupBy(a => a.provincia.nome).Select(a => a.First()).OrderBy(a => a.provincia.nome))
    {
        <option value="@d.provincia.nome" />
    }
</datalist>
<datalist id="ListaCap">
    @foreach (var d in comuni)
    {
        foreach (var item in d.cap.Distinct().OrderBy(a => a.ToString()))
        {
            <option value="@item.ToString()" />
        }

    }
</datalist>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript">

    $.culture = Globalize.culture("it-IT");
    $.validator.methods.date = function (value, element) {
        return this.optional(element) || Globalize.parseDate(value, "dd/MM/yyyy", "it-IT");
    }





    //(function ($, Globalize) {
    //    if (!$.validator) {
    //        return;
    //    }

    //    // Clone original methods we want to call into
    //    var originalMethods = {
    //        min: $.validator.methods.min,
    //        max: $.validator.methods.max,
    //        range: $.validator.methods.range
    //    };

    //    // Globalize options - initially just the date format used for parsing
    //    // Users can customise this to suit them
    //    $.validator.methods.dateGlobalizeOptions = {
    //        dateParseFormat: { skeleton: "yMd" }
    //    };

    //    // Tell the validator that we want numbers parsed using Globalize
    //    $.validator.methods.number = function (value, element) {
    //        var val = Globalize.parseNumber(value);
    //        return this.optional(element) || ($.isNumeric(val));
    //    };

    //    // Tell the validator that we want dates parsed using Globalize
    //    $.validator.methods.date = function (value, element) {
    //        var val = Globalize.parseDate(value,
    //          $.validator.methods.dateGlobalizeOptions.dateParseFormat);
    //        return this.optional(element) || (val instanceof Date);
    //    };

    //    // Tell the validator that we want numbers parsed using Globalize,
    //    // then call into original implementation with parsed value

    //    $.validator.methods.min = function (value, element, param) {
    //        var val = Globalize.parseNumber(value);
    //        return originalMethods.min.call(this, val, element, param);
    //    };

    //    $.validator.methods.max = function (value, element, param) {
    //        var val = Globalize.parseNumber(value);
    //        return originalMethods.max.call(this, val, element, param);
    //    };

    //    $.validator.methods.range = function (value, element, param) {
    //        var val = Globalize.parseNumber(value);
    //        return originalMethods.range.call(this, val, element, param);
    //    };
    //}(jQuery, Globalize));
</script>