@model NewISE.Models.DBModel.ConiugeModel

@{
    decimal idTrasferimento = Convert.ToDecimal(ViewData["idTrasferimento"]);
}

<style>
    div .col-xs-10 {
        padding-right: 25px;
    }
</style>

@using (@Ajax.BeginForm("ConfermaModificaConiuge", "MaggiorazioniFamiliari", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabConiuge", OnFailure = "ErroreElaborazioneAjax" }, new { id = "formEditConiuge" }))
{
    @Html.AntiForgeryToken()
    <div style="padding-left: 15px;">
        <div class="form-horizontal">
            <h4>Modifica del Coniuge</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.idMaggiorazioneConiuge)
            @Html.Hidden("idTrasferimento", idTrasferimento)

            <div class="form-group">
                @Html.LabelFor(model => model.nome, htmlAttributes: new { @class = "control-label col-xs-2" })
                <div class="col-xs-10">
                    @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                    @Html.ValidationMessageFor(model => model.nome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.cognome, htmlAttributes: new { @class = "control-label col-xs-2" })
                <div class="col-xs-10">
                    @Html.EditorFor(model => model.cognome, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                    @Html.ValidationMessageFor(model => model.cognome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.codiceFiscale, htmlAttributes: new { @class = "control-label col-xs-2" })
                <div class="col-xs-10">
                    @Html.EditorFor(model => model.codiceFiscale, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                    @Html.ValidationMessageFor(model => model.codiceFiscale, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-offset-2 col-xs-10">
                    <input type="submit" value="Modifica" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>

}

<p style="padding-left: 15px;">
    @Ajax.ActionLink("Torna indietro", "ElencoConiuge", "MaggiorazioniFamiliari", new { idTrasferimento = idTrasferimento }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabConiuge", OnFailure = "ErroreElaborazioneAjax", InsertionMode = InsertionMode.Replace })
</p>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>