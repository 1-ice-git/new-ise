@model NewISE.Models.DBModel.TrasferimentoModel

@using NewISE.Models.DBModel

<link href="~/Content/NuovoTrasferimento.css" rel="stylesheet" />

@{
    bool ricaricaInfoTrasf = (bool)ViewBag.ricaricaInfoTrasf;
    string vMatricola = ViewBag.Matricola;
    DipendentiModel dipendente = (DipendentiModel)ViewBag.Dipendente;
    bool vModifica = (bool)ViewBag.Modifica;

    

}

@*@using (@Ajax.BeginForm("InserisciTrasferimento", "Trasferimento", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabNuovoTrasferimento", OnFailure = "ErroreElaborazioneAjax" }, new { enctype = "multipart/form-data", id = "formTrasf" }))
    {*@
@*@Html.AntiForgeryToken()*@

<div id="divControlliNuovoTrasf">

    <div class="form-horizontal">

        @Html.Hidden("idDipendente", dipendente.idDipendente)

        @Html.Hidden("matricola", vMatricola)
        @Html.Hidden("ricaricaInfoTrasf", ricaricaInfoTrasf)
        @Html.Hidden("modifica", vModifica)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.idTipoTrasferimento, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div id="divCombo" class="col-xs-9">
                <div class="select2-container select2-container--classic">
                    @Html.DropDownList("idTipoTrasferimento", ViewBag.ListTipoTrasferimento as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                </div>
                @Html.ValidationMessageFor(model => model.idTipoTrasferimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.idUfficio, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div id="divCombo" class="col-xs-9">
                <div class="select2-container select2-container--classic">
                    @Html.DropDownList("idUfficio", ViewBag.ListUfficio as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                </div>
                @Html.ValidationMessageFor(model => model.idUfficio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dataPartenza, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9 form-inline">
                @Html.EditorFor(model => model.dataPartenza, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                @Html.ValidationMessageFor(model => model.dataPartenza, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RuoloUfficio.DescrizioneRuolo, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div id="divCombo" class="col-xs-9">
                <div class="select2-container select2-container--classic">
                    @Html.DropDownList("idRuoloUfficio", ViewBag.ListRuolo as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                </div>
                @Html.ValidationMessageFor(model => model.idRuoloUfficio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.idTipoCoan, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div id="divCombo" class="col-xs-9">
                <div class="select2-container select2-container--classic">
                    @Html.DropDownList("idTipoCoan", ViewBag.ListTipoCoan as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "AbilitaDisabilitaCoan(this.value);" })
                </div>
                @Html.ValidationMessageFor(model => model.idTipoCoan, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.coan, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.coan, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                @Html.ValidationMessageFor(model => model.coan, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.protocolloLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.protocolloLettera, new { htmlAttributes = new { @class = "form-control", style = "width:250px;" } })
                @Html.ValidationMessageFor(model => model.protocolloLettera, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dataLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-3 form-inline">
                @Html.EditorFor(model => model.dataLettera, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                @Html.ValidationMessageFor(model => model.dataLettera, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.allegaDocumento, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9 form-inline">
                    @Html.EditorFor(model => model.allegaDocumento, new { htmlAttributes = new { @class = "form-control checkbox", @style = "width:35px;" } })
                    @Html.ValidationMessageFor(model => model.allegaDocumento, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.file, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @if (Model!= null && Model.file != null)
                {
                    <input id="file" name="file" multiple type="file" class="file file-loading" data-allowed-file-extensions='["pdf"]' data-show-preview="false" value="@Model.file">
                    @Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })
                }
                else
                {
                    <input id="file" name="file" multiple type="file" class="file file-loading" data-allowed-file-extensions='["pdf"]' data-show-preview="false" value="">
                }
                
            </div>
        </div>

        <div class="form-group ">
            <div class="col-xs-offset-9 col-xs-3 pull-right">
                <img id="imgSalva" src="~/Immagini/Save-icon.png" width="50" onclick="Salva();" />
                <img id="imgNotificaTrasf" class="disabilitato" src="~/Immagini/Mail-icon-disabled.png" width="50" onclick="" />
            </div>
        </div>
    </div>
</div>

@*}*@

<div class="modal fade" id="myModalError" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-danger text-danger" id="myModalLabel">Attenzione!!!</h4>
            </div>
            <div class="modal-body alert alert-danger text-danger">
                <p id="msgModalError" class="text-danger"></p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-danger" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModalInfo" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-info text-info" id="myModalLabel">Info!!!</h4>
            </div>
            <div class="modal-body alert alert-info text-info">
                <p id="msgModalInfo" class="text-info"></p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-info" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript">
    //$('#allegaDocumento').checkboxpicker();

    $("#file").fileinput({
        showUpload: false,
        mainClass: "input-group-lg",
        language: "it"

    });

    function AbilitaDisabilitaCoan(value) {
        //debugger;
        if (value == "1") {
            $("#coan").attr("disabled", "disabled");
        }
        else {
            $("#coan").removeAttr("disabled");
        }
    }

    function Salva() {
        //$("#formTrasf").submit();
        //debugger;
        var datiForm = new FormData();
        var rotta = "/Trasferimento/InserisciTrasferimento";

        var idTipoTrasferimento = parseInt($("#idTipoTrasferimento").val());
        var idUfficio = parseInt($("#idUfficio").val());
        var dataPartenza = $("#dataPartenza").val();
        var idRuoloUfficio = parseInt($("#idRuoloUfficio").val());
        var idTipoCoan = parseInt($("#idTipoCoan").val());
        var coan = $("#coan").val();
        var protocolloLettera = $("#protocolloLettera").val();
        var dataLettera = $("#dataLettera").val();
        var file = $("#file")[0].files[0];

        var idDipendente = $("#idDipendente").val();
        var matricola = $("#matricola").val();
        var ricaricaInfoTrasf = $("#ricaricaInfoTrasf").val();
        var modifica = $("#modifica").val();



        datiForm.append("idTipoTrasferimento", idTipoTrasferimento);
        datiForm.append("idUfficio", idUfficio);
        datiForm.append("dataPartenza", dataPartenza);
        datiForm.append("idRuoloUfficio", idRuoloUfficio);
        datiForm.append("idTipoCoan", idTipoCoan);
        if (coan != "") {
            datiForm.append("coan", coan);
        }
        if (protocolloLettera != "") {
            datiForm.append("protocolloLettera", protocolloLettera);
        }
        if ($("#dataLettera").val() != "") {
            datiForm.append("dataLettera", dataLettera);
        }

        datiForm.append("file", file);

        datiForm.append("idDipendente", idDipendente);
        datiForm.append("matricola", matricola);
        datiForm.append("ricaricaInfoTrasf", ricaricaInfoTrasf);
        datiForm.append("modifica", modifica);



        $.ajax({
            url: rotta,
            type: "POST", //Le info testuali saranno passate in POST
            data: datiForm, //I dati, forniti sotto forma di oggetto FormData
            dataType: 'html',
            cache: false,
            processData: false, //Serve per NON far convertire l’oggetto
            //FormData in una stringa, preservando il file
            contentType: false, //Serve per NON far inserire automaticamente
            //un content type errato
            success: function(result)
            {
                //debugger;
                
                $("#tabNuovoTrasferimento").empty();
                $("#tabNuovoTrasferimento").html(result);
            }
        });
    }


    

    

    $("#idTipoTrasferimento").select2({
        placeholder: "Seleziona il tipo trasferimento",
        allowClear: true,
        language: "it",
        width: '350'

    });

    $("#idUfficio").select2({
        placeholder: "Seleziona l'ufficio",
        allowClear: true,
        language: "it",
        width: '250'

    });

    $("#idRuoloUfficio").select2({
        placeholder: "Seleziona il ruolo",
        allowClear: true,
        language: "it",
        width: '200'

    });

    $("#idTipoCoan").select2({
        placeholder: "Seleziona la tipologia del coan",
        allowClear: true,
        language: "it",
        width: '200'

    });

    $('#dataPartenza').datepicker({
        showButtonPanel: true,
        showAnim: "slide",
        //beforeShow: function (textbox, instance) {
        //    //debugger;
        //    var txtBoxOffset = $(this).offset();
        //    var top = txtBoxOffset.top;
        //    var left = txtBoxOffset.left;
        //    var altezza = textbox.offsetHeight;
        //    instance.dpDiv.css({
        //        marginTop: (-(altezza+277)) + 'px',
        //        //marginLeft: textbox.offsetWidth + 'px'
        //    });
        //}
    });

    $('#dataLettera').datepicker({
        showButtonPanel: true,
        showAnim: "slide",
        //beforeShow: function (textbox, instance) {
        //    //debugger;
        //    var txtBoxOffset = $(this).offset();
        //    var top = txtBoxOffset.top;
        //    var left = txtBoxOffset.left;
        //    var altezza = textbox.offsetHeight;
        //    instance.dpDiv.css({
        //        marginTop: (-(altezza+234)) + 'px',
        //        //marginLeft: textbox.offsetWidth + 'px'
        //    });
        //}
    });

    //$("#imgAllegaDocumento").click(function () {
    //    $("#documento").val("");
    //    $("#documento").click();
    //});

    //debugger;
    var rit = '@ricaricaInfoTrasf.ToString()';
    var boolrit = rit == 'true'
    if (boolrit == true) {
        InfoTrasferimento(vMatricola);
    }

    //$("#documento").change(function () {
    //    debugger;
    //    var file = $("#documento").val();

    //    if (file != "") {
    //        var splitFile = file.split("\\");
    //        var nomeFile = splitFile[splitFile.length - 1];

    //        var estensioniValide = new Array(".pdf");
    //        var estensione = nomeFile.substring(nomeFile.lastIndexOf('.')).toLowerCase();
    //        if (estensioniValide.contiene(estensione)) {

    //            //$("#nomeFile").val(nomeFile);
    //            $("#spanNomeFile").html(nomeFile);
    //            return true;
    //        } else {

    //            DialogInfo("L'estensione del documento che si vuole importare non è supportata. L'estensione supportata è il .pdf");

    //            return false;
    //        }
    //    }

    //});

    function ErroreElaborazioneAjax(response) {
        //debugger;
        $("#msgModalError").text("Errore nell'elaborazione.");
        $('#myModalError').modal('toggle');
    }

    function DialogInfo(response) {
        $("#msgModalInfo").text(response);
        $('#myModalInfo').modal('toggle');
    }
    //per inviare file da ajaxs
    //window.addEventListener("submit", function (e) {
    //    var form = e.target;
    //    if (form.getAttribute("enctype") === "multipart/form-data") {
    //        if (form.dataset.ajax) {
    //            e.preventDefault();
    //            e.stopImmediatePropagation();
    //            var xhr = new XMLHttpRequest();
    //            xhr.open(form.method, form.action);
    //            xhr.onreadystatechange = function () {
    //                if (xhr.readyState == 4 && xhr.status == 200) {
    //                    if (form.dataset.ajaxUpdate) {
    //                        var updateTarget = document.querySelector(form.dataset.ajaxUpdate);
    //                        if (updateTarget) {
    //                            updateTarget.innerHTML = xhr.responseText;
    //                        }
    //                    }
    //                }
    //            };
    //            xhr.send(new FormData(form));
    //        }
    //    }
    //}, true);
</script>