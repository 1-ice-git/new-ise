@model NewISE.Models.DBModel.TrasferimentoModel

@using System.Web.Optimization;

<style>
    .BordoRosso {
        border-style: double;
        border-color: red;
        border-width: 1px;
        display: inline-block;
    }
</style>

<div class="form-horizontal">

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.idTrasferimento)

    <div class="form-group">
        @Html.LabelFor(model => model.protocolloLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
        <div class="col-xs-9">
            <div id="divProtocolloLettera" style="display:inline-block;">
                @Html.TextBoxFor(model => model.protocolloLettera, new { @class = "form-control", style = "width:250px;" })
            </div>
            <i class="fa fa-asterisk text-danger" aria-hidden="true"></i>
            @*@Html.ValidationMessageFor(model => model.protocolloLettera, "", new { @class = "text-danger" })*@
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.dataLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
        <div class="col-xs-9 form-inline">
            <div id="divDataLettera" style="display:inline-block;">
                @Html.TextBoxFor(model => model.dataLettera, "{0:dd/MM/yyyy}", new { @class = "form-control", style = "width:200px;" })
            </div>
            <i class="fa fa-asterisk text-danger" aria-hidden="true"></i>
            @*@Html.ValidationMessageFor(model => model.dataLettera, "", new { @class = "text-danger" })*@
        </div>
    </div>

    <div class="form-group ">
        @Html.LabelFor(model => model.file, htmlAttributes: new { @class = "control-label col-xs-3" })
        <div class="col-xs-9">
            <input id="file" name="file" multiple type="file" class="file file-loading hidden" data-allowed-file-extensions='["pdf"]' data-show-preview="false" value="">
            <div id="divFile" style="display:inline-block;">
                <button class="btn btn-default  " id="btUpload" onclick="">
                    <i class="fa fa-2x fa-upload" aria-hidden="true"></i>
                    Seleziona lettera trasferimento
                </button>
                <span id="spanNomeFile">Seleziona il documento</span>
            </div>
            <i class="fa fa-asterisk text-danger" aria-hidden="true"></i>
            @*@Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })*@
        </div>
    </div>
    <div class="form-group">
        <div class="col-xs-12">
            <span id="spMsgError" class="text-danger col-xs-12" style="font-size:1.1em;"></span>
        </div>
    </div>
    <div class="form-group">
        <span class="text-danger col-xs-12" style="font-size:0.9em;">I campi con asterisco sono obbligatori.</span>
    </div>
</div>

<script type="text/javascript">

    $("#btUpload").click(function () {
        $("#file").empty();
        $("#file").click();
    });
    $('#dataLettera').datepicker({
        //showButtonPanel: true,
        showAnim: "slide",
    });

    $("#file").change(function () {
        //debugger;
        var file = $("#file").val();
        if (file != null && file != undefined) {
            var splitFile = file.split("\\");
            var nomeFile = splitFile[splitFile.length - 1];

            var estensioniValide = new Array(".pdf");
            var estensione = nomeFile.substring(nomeFile.lastIndexOf('.')).toLowerCase();
            if (estensioniValide.contiene(estensione)) {

                $("#NomeFile").val(nomeFile);
                //$("#EstensioneFile").val(estensione);

                $("#spanNomeFile").html(nomeFile);
                return true;
            } else {

                MsgErroreJson("L'estensione del documento che si vuole importare (" + estensione + ") non è supportata.\nL'estensione supportata è il .pdf");

                return false;
            }
        }

    });

    function Validazione() {
        //debugger;
        var ret = false;
        var c1 = false;
        var c2 = false;
        var c3 = false;

        var idTrasferimento = parseInt($("#idTrasferimento").val());
        var protocolloLettera = $("#protocolloLettera").val();
        var dataLettera = $("#dataLettera").val();
        var file = $("#file").val();

        if (idTrasferimento > 0) {

            if (protocolloLettera != "" && protocolloLettera != undefined) {
                $("#divProtocolloLettera").removeClass('BordoRosso');
                c1 = true;
            }
            else {
                $("#divProtocolloLettera").addClass('BordoRosso');
                c1 = false;
            }

            if (dataLettera != "" && dataLettera != undefined) {
                $("#divDataLettera").removeClass('BordoRosso');
                c2 = true;
            }
            else {
                $("#divDataLettera").addClass('BordoRosso');
                c2 = false;
            }

            if (file != null && file != undefined && file != "") {
                $("#divFile").removeClass('BordoRosso');
                c3 = true;
            }
            else {
                $("#divFile").addClass('BordoRosso');
                c3 = false;
            }

            if (c1 && c2 && c3) {
                ret = true;
            }
            else {
                ret = false;
            }

        }

        return ret;
    }

    function SalvaDocumento() {

        //debugger;
        var datiForm = new FormData();
        var rotta = "/Documenti/InserisciLetteraTrasferimento";

        var idTrasferimento = parseInt($("#idTrasferimento").val());
        var protocolloLettera = $("#protocolloLettera").val();
        var dataLettera = $("#dataLettera").val();
        var file = $("#file")[0].files[0];

        if (Validazione()) {

            datiForm.append("idTrasferimento", idTrasferimento);

            datiForm.append("protocolloLettera", protocolloLettera);

            datiForm.append("dataLettera", dataLettera);

            datiForm.append("file", file);

            $.ajax({
                url: rotta,
                type: "POST", //Le info testuali saranno passate in POST
                data: datiForm, //I dati, forniti sotto forma di oggetto FormData
                dataType: 'json',
                cache: false,
                async: false,
                beforeSend: function () {
                    //debugger;
                    VerificaAutenticazione();
                    //Blocca();
                    $("#btUpload").attr("disabled", "disabled");
                    $("#btUpload").addClass("disabled");
                },
                processData: false, //Serve per NON far convertire l’oggetto
                //FormData in una stringa, preservando il file
                contentType: false, //Serve per NON far inserire automaticamente
                //un content type errato
                success: function (result) {
                    //debugger;

                    if (result.err != "" && result.err != undefined) {
                        MsgErroreJson(result.err);
                    }
                    else {
                        MsgErroreJson(result.msg);

                        CloseTimeModal();
                    }

                },
                complete: function () {
                    //$("#btUpload").removeAttr("disabled");
                },
                error: function (error) {
                    //debugger;
                    //Sblocca();
                    $("#btUpload").removeAttr("disabled");
                    $("#btUpload").removeClass("disabled");
                    var msg = error.responseText;
                    MsgErroreJson(msg);
                }
            });
        }
        //else {
        //    DialogInfo("Prima di inviare la lettera di trasferimento è necessario compilare i campi con asterisco.");
        //}

    }

    function MsgErroreJson(msg) {
        $("#spMsgError").html(msg);
    }


</script>