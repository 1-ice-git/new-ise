@using NewISE.Models.Enumeratori
@model NewISE.Models.ViewModel.LogAllineamentoViewModel

@{ 
    string msg = Convert.ToString(ViewBag.msg);
    bool schedulata = false;
    if(Model.StatoElaborazione==(decimal)EnumStatoElaborazione.Schedulata)
    {
        schedulata = true;
    }
}



<div style="margin: 15px"></div>


<div class="row">
    <div class="col-xs-12 text-center">
        <h4><strong>Import Dati da ISEPRO a ISESIM</strong></h4>
    </div>
</div>

@Html.AntiForgeryToken()
<div class="row">
    <div id="divAllineamento" class="col-xs-12">
        <div class="col-xs-12" style="background-color:aliceblue; border:solid;border-width:thin;padding-bottom:30px;border-radius:15px">

            <div class="row" style="padding-top:30px">
                <div class="form-group  text-right">
                    @Html.LabelFor(model => model.DataOraFine, new { @class = "control-label col-xs-4", @style = "padding-top:10px" })
                    <div class="col-xs-2">
                        @Html.TextBoxFor(model => model.DataOraFine, "{0:dd/MM/yyyy HH:mm}", new { @readonly = "readonly", @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row"  style="padding-top:30px">
                <div class="form-group  text-right">
                    @Html.LabelFor(model => model.StatoElaborazione, new { @class = "control-label col-xs-4", @style = "padding-top:10px" })
                    @if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.Terminata)
                    {
                        <div class="col-xs-4" style="color:#ff2828">
                            @Html.TextBoxFor(model => model.FaseElaborazione, new { @readonly = "readonly", @class = "form-control", @style = "background-color:#a3f88a" }) <!-- verde -->
                        </div>
                    }
                    else
                    if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.TerminataConErrori)
                    {
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.FaseElaborazione, new { @readonly = "readonly", @class = "form-control", @style = "color:#000000; background-color:#ff2828" })<!-- rosso -->
                        </div>
                    }
                    else
                    if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.InCorso)
                    {
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.FaseElaborazione, new { @readonly = "readonly", @class = "form-control", @style = "background-color:#fffb2d" }) <!-- giallo -->
                        </div>
                    }
                    else
                    if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.Schedulata)
                    {
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.FaseElaborazione, new { @readonly = "readonly", @class = "form-control", @style = "background-color:#ffffff" }) <!-- bianco -->
                        </div>
                        <div class="col-xs-4 text-left">
                            <button class="btn btn-small btn-danger" disabled id="annulla">
                                <i aria-hidden="true" class="fa fa-remove"></i>
                                &nbsp;Annulla
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="col-xs-4">
                            @Html.TextBoxFor(model => model.FaseElaborazione, new { @readonly = "readonly", @class = "form-control", @style = "background-color:#ffffff" }) <!-- bianco -->
                        </div>
                    }


                </div>
            </div>

            <div class="row" style="padding-top:30px">
                <div class="form-group  text-right">
                    @Html.LabelFor(model => model.DataOraInizio, new { @class = "control-label col-xs-4", @style = "padding-top:10px" })
                    @if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.Terminata || Model.StatoElaborazione == (decimal)EnumStatoElaborazione.TerminataConErrori)
                    {         
                        <div class='col-xs-2'>
                            <div class="form-group">
                                <div class='input-group date' id='datetimepicker1'>
                                    @Html.TextBoxFor(model => model.DataOraInizio, "{0:dd/MM/yyyy HH:mm}", new { @class = "form-control", @style = "width:150px"})
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                </div>
                                <div id="divDataOraIni" hidden class="text-left" style="padding-top:10px">
                                    <i class="fa fa-asterisk text-danger"></i>
                                    <span class="text-danger">Campo obbligatorio</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-2 text-left" style="margin-left:30px">
                            <button class="btn btn-small btn-success" id="procedi">
                                <i aria-hidden="true" class="fa fa-download"></i>
                                Procedi
                            </button>
                        </div>
                    }


                    @if (Model.StatoElaborazione == (decimal)EnumStatoElaborazione.InCorso || Model.StatoElaborazione == (decimal)EnumStatoElaborazione.Schedulata)
                    {
                        <div class='col-xs-2'>
                            <div class="form-group">
                                <div class='input-group date' id='datetimepicker1'>
                                    @Html.TextBoxFor(model => model.DataOraInizio, "{0:dd/MM/yyyy HH:mm}", new { @class = "form-control", @style = "width:150px", @disabled="disabled" })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time disabled"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-2 text-left" style="margin-left:30px">
                            <button class="btn btn-small btn-success" disabled id="procedi">
                                <i aria-hidden="true" class="fa fa-download"></i>
                                Procedi
                            </button>
                        </div>
                    }
                </div>                                             
            </div>
        </div>
    </div>
</div>

   

<div class="modal fade" id="myModalErrorModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-warning text-warning" id="myModalLabel">Attenzione!!!</h4>
            </div>
            <div class="modal-body alert alert-warning text-warning">
                <p id="msgModalWarning" class="text-warning">
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                </p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-warning" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
 
    $(function () {
        $('#datetimepicker1').datetimepicker({
            format: 'DD/MM/YYYY HH:mm'
        });
    });

    $(function () {
        $('#DataOraInizio').datetimepicker({
            format: 'DD/MM/YYYY HH:mm'
        });
    });

    $("#btConfermaAllineamento").on("click", function () {
        //debugger;
        rotta = "/Allineamento/AvviaAllineamento";

        var dataorainizio = $("#DataOraInizio").val();

        $.ajax({
            type: "POST",
            url: rotta,
            data: { dataorainizio: dataorainizio },
            dataType: 'json',
            async:'false',
            beforeSend: function () {

            },
            success: function (result) {
                //debugger;
                if (result.errore == "") {
                    $("#divmsg").empty();
                    $("#divmsg").html(result.msg);
                    $('#ModalMessaggioSchedulata').modal().show();
                } else {
                    ErroreElaborazioneAjax(result.errore);
                }
            },
            complete: function () {

            },
            error: function (jqXHR, textStatus, errorThrow) {
                //debugger;
                var msg = errorThrow.err;
                AlertDialog(msg);
            }
        });
    });

    $('#ModalMessaggioSchedulata').on('hidden.bs.modal', function (e) {
        //debugger;
        RicaricaAllineamento();
    });

    function RicaricaAllineamento()
    {
        Allineamento();
    }

    $("#procedi").on("click", function () {
        //debugger;
        if (Validazione()) {
            $('#ModalConfermaSchedula').modal().show();
        }
    });          

</script>

