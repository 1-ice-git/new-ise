@model NewISE.Models.ViewModel.CanoneMABViewModel

<script src="~/Scripts/globalize.0.1.3/globalize.js"></script>
<script src="~/Scripts/globalize.0.1.3/cultures/globalize.culture.it-IT.js"></script>

@{
    decimal idMab = Convert.ToDecimal(ViewData["idMab"]);
    decimal idTrasferimento = Convert.ToDecimal(ViewData["idTrasferimento"]);
    bool dataInizioValiditaModificabile = Convert.ToBoolean(ViewData["dataInizioValiditaModificabile"]);
    var errori = ViewData.ModelState;
}

<div style="padding-left:15px; padding-right:10px;">
    @using (@Ajax.BeginForm("InserisciImportoCanone", "VariazioneMaggiorazioneAbitazione", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabAttivitaMAB_var", OnFailure = "ErroreElaborazioneAjax", InsertionMode = InsertionMode.Replace }, new { id = "formNewCanoneMAB" }))
    {
        @Html.AntiForgeryToken()
        @Html.Hidden("idMab", idMab)
        @Html.Hidden("idTrasferimento", idTrasferimento)
        @Html.Hidden("dataInizioValiditaModificabile", dataInizioValiditaModificabile)
        <input type="hidden" id="hImportoCanone" name="ImportoCanone" value="0" />

        <div class="form-horizontal">
            <h4>Nuovo Canone M.AB.</h4>
            <hr />

            <div class="row">
                <div class="col-xs-12" style="padding-top:5px; padding-bottom:5px">
                    <div class="row">
                        <div class="form-group">
                            @Html.LabelFor(model => model.canoneAttuale, htmlAttributes: new { @class = "control-label col-xs-2" })
                            <div class="col-xs-2">
                                @if (Model != null)
                                {

                                    <input type="text" id="canoneAttuale" value="@Model.canoneAttuale.ToString("N2")" readonly="readonly" class="form-control text-right" />
                                }
                                else
                                {
                                    <input type="text" id="canoneAttuale" value="0,00" readonly="readonly" class="form-control text-right" />
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ImportoCanone, htmlAttributes: new { @class = "control-label col-xs-2" })
                            <div class="col-xs-2">
                                @if (Model != null)
                                {
                                    <input type="text" id="ImportoCanone" value="@Model.ImportoCanone.ToString("N2")" class="form-control text-right" onclick="SelectNumer();" />
                                }
                                else
                                {

                                    <input type="text" id="ImportoCanone" value="0,00" class="form-control text-right" onclick="SelectNumer();" />
                                }
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Valuta", htmlAttributes: new { @class = "control-label col-xs-2" })
                            <div class="select2-container select2-container--classic col-xs-2">
                                @Html.DropDownListFor(Model => Model.idValuta, ViewBag.lValute as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select col-xs-2", @onchange = "" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ut_dataInizioValidita, htmlAttributes: new { @class = "control-label col-xs-2" })
                            <div class="col-xs-2">
                                @if (dataInizioValiditaModificabile)
                                {
                                    @Html.TextBoxFor(model => model.ut_dataInizioValidita, new { @class = "form-control col-xs-2", @type = "datetime" })
                                }
                                else
                                {
                                    @*@Html.TextBoxFor(model => model.DataInizioValidita, new {disabled = "disabled", @class = "form-control", @type = "datetime" })*@
                                    <input id="DataInizioValidita" name="DataInizioValidita" type="datetime" value="@Model.DataInizioValidita.ToShortDateString()" class="form-control col-xs-2" readonly />
                                    @*@Html.TextBox("provaData", Model.DataInizioValidita)*@
                                }
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(Model => Model.chkAggiornaTutti, htmlAttributes: new { @class = "control-label col-xs-2" })
                            <div class="col-xs-2">
                                <span class="text-uppercase">@Html.CheckBoxFor(model => model.chkAggiornaTutti)</span>
                            </div>
                        </div>

                        <div class="form-group">&nbsp;</div>
                    </div>
                    <div class="form-group">
                        <div class="col-xs-offset-2 col-xs-10">
                            <input type="submit" value="Salva" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="ModalErrorNewCanoneMAB" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title alert alert-warning text-warning" id="myModalLabel">Attenzione!!!</h4>
                        </div>
                        <div class="modal-body alert alert-warning text-warning">
                            <p id="msgModalWarning" class="text-warning">
                                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <div class="modal-footer">
                            <button id="btProcedi" type="button" class="btn btn-warning" data-dismiss="modal">OK</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div style="padding-left: 15px;">
        @Ajax.ActionLink("Torna indietro", "ElencoCanoneMAB", "VariazioneMaggiorazioneAbitazione", new { idMab = idMab, idTrasferimento = idTrasferimento }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabAttivitaMAB_var", OnFailure = "ErroreElaborazioneAjax", InsertionMode = InsertionMode.Replace })
    </div>
</div>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/MyValidateDate.js"></script>

<script type="text/javascript">

    @foreach (var e in errori)
    {
        if (e.Value.Errors.Count > 0)
        {
            @:DialogModalError('True');
                                                            break;
        }

    }

    $("#idValuta").select2({
        placeholder: "Seleziona la valuta",
        allowClear: true,
        language: "it",
        width: '170',
        allowClear: false

    });


    function DialogModalError(err) {
        //debugger;
        if (err == 'True') {
            $('#ModalErrorNewCanoneMAB').modal('toggle');
        }
    }

    //canoneAttuale = new AutoNumeric('#canoneAttuale', autoNumericOptionsEuro);

    ImportoCanone = new AutoNumeric('#ImportoCanone', autoNumericOptionsEuro);

    function SelectNumer() {
        ImportoCanone.selectNumber();
    }

    $('#formNewCanoneMAB').submit(function () {
        //debugger;
        var form = $(this);
        if (!form.valid()) {
            DialogModalError('True');
        }
        else {
            //var ip = $("#ImportoCanone").autoNumeric("get");
            var ip = ImportoCanone.getNumber();
            $("#hImportoCanone").val(ip.toString().replace(".", ","));
            //$("#canoneAttuale").val($("#canoneAttuale").val().toString().replace(".", ","));
        }
    });

    $('#ut_dataInizioValidita').datepicker({
        showAnim: "slide",
        changeMonth: true,
        changeYear: true
    });

    $('#DataFineValidita').datepicker({
        showAnim: "slide",
        changeMonth: true,
        changeYear: true
    });

    //$("#ImportoCanone").autoNumeric('init',
    //{
    //    aSep: '.',
    //    aDec: ',',
    //    aSign: ''
    //});



    $.culture = Globalize.culture("it-IT");

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || !isNaN(Globalize.parseFloat(value));
    };

</script>
