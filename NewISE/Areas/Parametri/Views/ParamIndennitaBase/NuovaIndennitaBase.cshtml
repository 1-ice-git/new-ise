@model NewISE.Models.DBModel.IndennitaBaseModel
@using NewISE.Models.DBModel;

<script src="~/Scripts/autoNumeric/autoNumeric-min.js"></script>
<script src="~/Scripts/globalize.0.1.3/globalize.js"></script>
<script src="~/Scripts/globalize.0.1.3/cultures/globalize.culture.it-IT.js"></script>

@Scripts.Render("~/bundles/jqueryval")

@{

    LivelloModel lm = (LivelloModel)ViewBag.Livello;
    string descrizioneLivello = lm.DescLivello;
    bool escludiAnnullati = (bool)ViewBag.escludiAnnullati;
    decimal idLivello = lm.idLivello;

  //  var errori = ViewData.ModelState;

}

@using (Ajax.BeginForm("InserisciIndennitaBase", "ParamIndennitaBase", new { idLivello= idLivello, escludiAnnullati = @escludiAnnullati }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "divPViewParametri", OnFailure = "ErroreElaborazioneAjax" }, new { id = "formIndennitaBase" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        <div class="row">
            <div class="col-xs-offset-2 col-xs-10">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.idLivello)
        <input type="hidden" id="escludiAnnullati" , name="escludiAnnullati" value="@escludiAnnullati.ToString()" />
       
        <div class="form-group">
            <div class="col-xs-2 text-right">
                <label>Livello </label>
            </div>
            <div class="col-xs-10">
                <div class="panel panel-default">
                    <label style="padding-left:5px; padding-top:5px; font-weight: bold;">@descrizioneLivello.ToString()</label>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dataInizioValidita, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dataInizioValidita, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dataInizioValidita, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dataFineValidita, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dataFineValidita, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dataFineValidita, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group ">
            @Html.LabelFor(model => model.valore, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.valore, new { htmlAttributes = new { @class = "form-control number" } })
                @Html.ValidationMessageFor(model => model.valore, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.valoreResponsabile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.valoreResponsabile, new { htmlAttributes = new { @class = "form-control number" } })
                @Html.ValidationMessageFor(model => model.valoreResponsabile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Inserisci" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-xs-offset-2 col-xs-10">
        <a href="#" onclick="TornaElencoIb();">Torna all'elenco delle indennità di base.</a>
    </div>
</div>

<div class="modal fade" id="myModalErrorModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-warning text-warning" id="myModalLabel">Attenzione!!!</h4>
            </div>
            <div class="modal-body alert alert-warning text-warning">
                <p id="msgModalWarning" class="text-warning">
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                </p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-warning" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
  
   // debugger;
     @*@foreach(var e in errori)
    {
        if(e.Value.Errors.Count>0)
        {
            @:DialogModalError('True');
            break;
        }
    }

    $('#formIndennitaBase').submit(function () {
      //  debugger;
        var form = $(this);
        if (!form.valid()) {
            DialogModalError('True');
        }
    });

    function DialogModalError(err) {
        //debugger;
        if (err == 'True') {
            $('#myModalErrorModel').modal('toggle');
        }
    }*@

    Globalize.culture("it-IT");

    $("#valore").autoNumeric('init',
	{
	    aSep: '.',
	    aDec: ',',
	    aSign: ''
	});

    $("#valoreResponsabile").autoNumeric('init',
	{
	    aSep: '.',
	    aDec: ',',
	    aSign: ''
	});

    $('form').submit(function () {
        //debugger;
        var form = $(this);
        $('input.number').each(function (i) {
            //debugger;
            var self = $(this);
            try {
                var v = self.autoNumeric('get');
                //self.autoNumeric('destroy');
                var n = v.replace(".", ",");
                self.val(n);
            } catch (err) {
                console.log("Non è un campo autonumeric: " + self.attr("name"));
            }
        });
        return true;
    });

    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    };

    $.validator.methods.number = function (value, element) {
        //debugger;
        return this.optional(element) || !isNaN(Globalize.parseFloat(value));
    };

    $('#dataInizioValidita').datepicker({
        inline: true,
        changeMonth: true,
        changeYear: true,
    });
    $('#dataFineValidita').datepicker({
        inline: true,
        changeMonth: true,
        changeYear: true,
    });
      

    function TornaElencoIb() {
        rotta = "/Parametri/ParamIndennitaBase/IndennitaBaseLivello";

        var idLivello = parseFloat('@idLivello');
       
        if (isNaN(idLivello)) {
            $("#divPViewParametri").empty();
            return false;
        }
        
        var chk = false;
        if ($("#escludiAnnullati").is(":checked")) {
            chk = true;
        }

        $.ajax({
            type: "POST",
            url: rotta,
            data: { idLivello: idLivello, escludiAnnullati: chk },
            dataType: 'html',
            beforeSend: function () {
                //debugger;
                //VerificaAutenticazione();
                //$("#DialogNewDoc").dialog("destroy");
                //$("#divEffettoLoadAutNoDoc").show("slow");
            },
            success: function (result) {
                //debugger;
                //$("#divEffettoLoadAutNoDoc").hide("slow");
                $("#divPViewParametri").empty();
                $("#divPViewParametri").html(result);

                //RicercaDocumenti();

            },
            complete: function () {
                //$("#divEffettoLoadAutNoDoc").hide("slow");
                //                $("#Centro").getNiceScroll().resize();
            },
            error: function (jqXHR, textStatus, errorThrow) {
                //debugger;
                var msg = errorThrow.err;
                AlertDialog(msg);
            }

        });
    }
</script>