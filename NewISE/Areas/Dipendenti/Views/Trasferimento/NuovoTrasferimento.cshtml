@model NewISE.Areas.Dipendenti.Models.dipTrasferimentoModel

@{
    bool ricaricaInfoTrasf = (bool)ViewBag.ricaricaInfoTrasf;


}

@using (@Ajax.BeginForm("InserisciTrasferimento", "Trasferimento", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tabNuovoTrasferimento", OnFailure = "ErroreElaborazioneAjax" }, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div id="divControlliNuovoTrasf">

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.idTipoTrasferimento, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div id="divCombo" class="col-xs-9">
                    <div class="select2-container select2-container--classic">
                        @Html.DropDownList("idTipoTrasferimento", ViewBag.ListTipoTrasferimento as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.idTipoTrasferimento, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.idUfficio, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div id="divCombo" class="col-xs-9">
                    <div class="select2-container select2-container--classic">
                        @Html.DropDownList("idUfficio", ViewBag.ListUfficio as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.idUfficio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.dataPartenza, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9 form-inline">
                    @Html.EditorFor(model => model.dataPartenza, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                    @Html.ValidationMessageFor(model => model.dataPartenza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.idRuolo, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div id="divCombo" class="col-xs-9">
                    <div class="select2-container select2-container--classic">
                        @Html.DropDownList("idRuolo", ViewBag.ListRuolo as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.idRuolo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.idTipoCoan, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div id="divCombo" class="col-xs-9">
                    <div class="select2-container select2-container--classic">
                        @Html.DropDownList("idTipoCoan", ViewBag.ListTipoCoan as IEnumerable<SelectListItem>, new { @class = "form-control select2 select2-select", @onchange = "" })
                    </div>
                    @Html.ValidationMessageFor(model => model.idTipoCoan, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.coan, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9">
                    @Html.EditorFor(model => model.coan, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                    @Html.ValidationMessageFor(model => model.coan, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.protocolloLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9">
                    @Html.EditorFor(model => model.protocolloLettera, new { htmlAttributes = new { @class = "form-control", style = "width:250px;" } })
                    @Html.ValidationMessageFor(model => model.protocolloLettera, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.dataLettera, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9 form-inline">
                    @Html.EditorFor(model => model.dataLettera, new { htmlAttributes = new { @class = "form-control", @style = "width:200px;" } })
                    @Html.ValidationMessageFor(model => model.dataLettera, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.documento, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9 form-inline">
                    @Html.EditorFor(model => model.documento, new { htmlAttributes = new { @class = "form-control checkbox",  @style = "width:35px;" } })                   
                    @Html.ValidationMessageFor(model => model.documento, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group ">
                <div class="col-xs-offset-3 col-xs-9">
                    <input type="submit" value="Inserisci" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>

}

<div class="modal fade" id="myModalError" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-danger text-danger" id="myModalLabel">Attenzione!!!</h4>
            </div>
            <div class="modal-body alert alert-danger text-danger">
                <p id="msgModalError" class="text-danger"></p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-danger" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModalInfo" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title alert alert-info text-info" id="myModalLabel">Info!!!</h4>
            </div>
            <div class="modal-body alert alert-info text-info">
                <p id="msgModalInfo" class="text-info"></p>
            </div>
            <div class="modal-footer">
                <button id="btProcedi" type="button" class="btn btn-info" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    //$('#chkAllegaDoc').checkboxpicker();

    $("#idTipoTrasferimento").select2({
        placeholder: "Seleziona il tipo trasferimento",
        allowClear: true,
        language: "it",
        width: '350'

    });

    $("#idUfficio").select2({
        placeholder: "Seleziona l'ufficio",
        allowClear: true,
        language: "it",
        width: '250'

    });

    $("#idRuolo").select2({
        placeholder: "Seleziona il ruolo",
        allowClear: true,
        language: "it",
        width: '200'

    });

    $("#idTipoCoan").select2({
        placeholder: "Seleziona la tipologia del coan",
        allowClear: true,
        language: "it",
        width: '200'

    });

    $('#dataPartenza').datepicker({
        inline: true,

    });

    $('#dataLettera').datepicker({
        inline: true,
    });

    $("#imgAllegaDocumento").click(function () {
        $("#documento").val("");
        $("#documento").click();
    });

    $(function () {
        debugger;
        var rit=@ricaricaInfoTrasf;

        if (rit==true) {

        }
    });

    //$("#documento").change(function () {
    //    debugger;
    //    var file = $("#documento").val();

    //    if (file != "") {
    //        var splitFile = file.split("\\");
    //        var nomeFile = splitFile[splitFile.length - 1];

    //        var estensioniValide = new Array(".pdf");
    //        var estensione = nomeFile.substring(nomeFile.lastIndexOf('.')).toLowerCase();
    //        if (estensioniValide.contiene(estensione)) {

    //            //$("#nomeFile").val(nomeFile);
    //            $("#spanNomeFile").html(nomeFile);
    //            return true;
    //        } else {

    //            DialogInfo("L'estensione del documento che si vuole importare non è supportata. L'estensione supportata è il .pdf");

    //            return false;
    //        }
    //    }

    //});

   
    
    

    function ErroreElaborazioneAjax(response) {
        $("#msgModalError").text("Errore nell'elaborazione.");
        $('#myModalError').modal('toggle');
    }

    function DialogInfo(response) {
        $("#msgModalInfo").text(response);
        $('#myModalInfo').modal('toggle');
    }
    //per inviare file da ajaxs
    //window.addEventListener("submit", function (e) {
    //    var form = e.target;
    //    if (form.getAttribute("enctype") === "multipart/form-data") {
    //        if (form.dataset.ajax) {
    //            e.preventDefault();
    //            e.stopImmediatePropagation();
    //            var xhr = new XMLHttpRequest();
    //            xhr.open(form.method, form.action);
    //            xhr.onreadystatechange = function () {
    //                if (xhr.readyState == 4 && xhr.status == 200) {
    //                    if (form.dataset.ajaxUpdate) {
    //                        var updateTarget = document.querySelector(form.dataset.ajaxUpdate);
    //                        if (updateTarget) {
    //                            updateTarget.innerHTML = xhr.responseText;
    //                        }
    //                    }
    //                }
    //            };
    //            xhr.send(new FormData(form));
    //        }
    //    }
    //}, true);
</script>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
}